The ``1-my_list`` module
====================

Using ``1-my_list``
----------------

Import function from module
        >>> MyList = __import__('1-my_list').MyList

Checking correct class type
        >>> check = MyList()
        >>> type(check) is MyList
        True

Checking correct instance
        >>> check = MyList()
        >>> isinstance(check, MyList)
        True

Checking print_sorted is a method
        >>> type(MyList.__dict__['print_sorted'])
        <class 'function'>

Checking print_sorted method via class:
	    >>> check.__class__.print_sorted()
	    Traceback (most recent call last):
	    TypeError: print_sorted() missing 1 required positional argument: 'self'

Checking print_sorted method with 1 arg:
    >>> check.print_sorted([67, 0, 121])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Checking empty list test:
    >>> check_list = MyList()
    >>> check_list.print_sorted()
    []

Checking normal list test:
    >>> check_list = MyList([3, 22, 1])
    >>> check_list.print_sorted()
    [1, 3, 22]

Checking normal list2:
    >>> check_list = MyList([1, 4, 2, 3, 5])
    >>> check_list.print_sorted()
    [1, 2, 3, 4, 5]

Negative numbers list test:
    >>> check_list = MyList([-3001, -99, -579999, 0, -98167333, -222])
    >>> check_list.print_sorted()
    [-98167333, -579999, -3001, -222, -99, 0]

Original list comparition:
    >>> check_list = MyList([4, 21, 1, -14, 28, 180, 0])
    >>> check_list.print_sorted()
    [-14, 0, 1, 4, 21, 28, 180]
    >>> check_list
    [4, 21, 1, -14, 28, 180, 0]

List already in order:
    >>> check_list = MyList([-16, 0, 1, 5, 10, 32, 200])
    >>> check_list.print_sorted()
    [-16, 0, 1, 5, 10, 32, 200]

Test append:
    >>> check_list = MyList()
    >>> check_list.append(58)
    >>> check_list
    [58]

